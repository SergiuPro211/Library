-- Add this function at the end of the file, just before the return statement

function OrionLib:AddConfigurationSystem(Parent)
    -- Check if Parent is a section or tab and get appropriate container
    local Container = Parent
    if Parent.Container then -- It's a tab
        Container = Parent:AddSection({Name = "Configurations"})
    end
    
    -- Create variables to store config state
    local SelectedConfig = ""
    local ConfigList = {}
    
    -- Function to refresh the configs list
    local function RefreshConfigs()
        ConfigList = {}
        local Files = listfiles(OrionLib.Folder)
        for _, File in pairs(Files) do
            if File:sub(-4) == ".txt" then
                local FileName = File:gsub(OrionLib.Folder .. "\\", "")
                FileName = FileName:gsub(".txt", "")
                if FileName ~= tostring(game.GameId) then -- Skip auto-save file
                    table.insert(ConfigList, FileName)
                end
            end
        end
        return ConfigList
    end
    
    -- Create config name input
    local ConfigNameBox = Container:AddTextbox({
        Name = "Config Name",
        Default = "",
        TextDisappear = false,
        Callback = function(Text)
            SelectedConfig = Text
        end
    })
    
    -- Create config dropdown
    local ConfigDropdown = Container:AddDropdown({
        Name = "Saved Configs",
        Default = "",
        Options = RefreshConfigs(),
        Callback = function(Selected)
            SelectedConfig = Selected
            ConfigNameBox:Set(Selected)
        end
    })
    
    -- Create Save/Create button
    Container:AddButton({
        Name = "Create Config",
        Callback = function()
            if SelectedConfig ~= "" then
                local Data = {}
                for i, v in pairs(OrionLib.Flags) do
                    if v.Save then
                        if v.Type == "Colorpicker" then
                            Data[i] = PackColor(v.Value)
                        else
                            Data[i] = v.Value
                        end
                    end    
                end
                writefile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt", tostring(HttpService:JSONEncode(Data)))
                OrionLib:MakeNotification({
                    Name = "Configuration",
                    Content = "Created configuration: " .. SelectedConfig,
                    Time = 5
                })
                ConfigDropdown:Refresh(RefreshConfigs(), true)
            else
                OrionLib:MakeNotification({
                    Name = "Configuration",
                    Content = "Please enter a config name!",
                    Time = 5
                })
            end
        end
    })
    
    -- Create Save/Overwrite button
    Container:AddButton({
        Name = "Save/Overwrite Config",
        Callback = function()
            if SelectedConfig ~= "" then
                local Data = {}
                for i, v in pairs(OrionLib.Flags) do
                    if v.Save then
                        if v.Type == "Colorpicker" then
                            Data[i] = PackColor(v.Value)
                        else
                            Data[i] = v.Value
                        end
                    end    
                end
                
                if isfile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt") then
                    -- Overwrite
                    writefile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt", tostring(HttpService:JSONEncode(Data)))
                    OrionLib:MakeNotification({
                        Name = "Configuration",
                        Content = "Overwritten configuration: " .. SelectedConfig,
                        Time = 5
                    })
                else
                    -- Create new
                    writefile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt", tostring(HttpService:JSONEncode(Data)))
                    OrionLib:MakeNotification({
                        Name = "Configuration",
                        Content = "Created configuration: " .. SelectedConfig,
                        Time = 5
                    })
                    ConfigDropdown:Refresh(RefreshConfigs(), true)
                end
            else
                OrionLib:MakeNotification({
                    Name = "Configuration",
                    Content = "Please enter a config name!",
                    Time = 5
                })
            end
        end
    })
    
    -- Create Load button
    Container:AddButton({
        Name = "Load Selected Config",
        Callback = function()
            if isfile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt") then
                local Success, Result = pcall(function()
                    return readfile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt")
                end)
                
                if Success then
                    LoadCfg(Result)
                    OrionLib:MakeNotification({
                        Name = "Configuration",
                        Content = "Loaded configuration: " .. SelectedConfig,
                        Time = 5
                    })
                else
                    OrionLib:MakeNotification({
                        Name = "Configuration",
                        Content = "Failed to load configuration!",
                        Time = 5
                    })
                end
            else
                OrionLib:MakeNotification({
                    Name = "Configuration",
                    Content = "Config doesn't exist!",
                    Time = 5
                })
            end
        end
    })
    
    -- Create Refresh button
    Container:AddButton({
        Name = "Refresh Config List",
        Callback = function()
            ConfigDropdown:Refresh(RefreshConfigs(), true)
            OrionLib:MakeNotification({
                Name = "Configuration",
                Content = "Refreshed config list",
                Time = 3
            })
        end
    })
    
    -- Create Delete button
    Container:AddButton({
        Name = "Delete Selected Config",
        Callback = function()
            if SelectedConfig ~= "" and isfile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt") then
                delfile(OrionLib.Folder .. "/" .. SelectedConfig .. ".txt")
                ConfigDropdown:Refresh(RefreshConfigs(), true)
                OrionLib:MakeNotification({
                    Name = "Configuration",
                    Content = "Deleted configuration: " .. SelectedConfig,
                    Time = 5
                })
                SelectedConfig = ""
                ConfigNameBox:Set("")
            else
                OrionLib:MakeNotification({
                    Name = "Configuration",
                    Content = "Select a valid config to delete!",
                    Time = 5
                })
            end
        end
    })
end

-- Keep the original return OrionLib at the end
